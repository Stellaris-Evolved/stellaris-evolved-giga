namespace = giga_frameworld_origin

### game start
country_event = {
	id = giga_frameworld_origin.000
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_origin = origin_frameworld
	}
	
	immediate = {
		# colony ship cost modifier
		add_modifier = {
			modifier = frameworld_origin_colony_cost
		}
		
		set_variable = {
			which = giga_frameworld_megastructure_cost
			value = 1
		}

		##### set up documentation

		begin_event_chain = {
			event_chain = giga_frameworld_docs_chain
		}

		create_point_of_interest = {
			id = giga_frameworld_docs_chain.1
			name = "giga_frameworld_docs_expansion"
			desc = "giga_frameworld_docs_expansion_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}

		create_point_of_interest = {
			id = giga_frameworld_docs_chain.2
			name = "giga_frameworld_docs_asteroids"
			desc = "giga_frameworld_docs_asteroids_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}

		create_point_of_interest = {
			id = giga_frameworld_docs_chain.3
			name = "giga_frameworld_docs_outposts"
			desc = "giga_frameworld_docs_outposts_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}

		create_point_of_interest = {
			id = giga_frameworld_docs_chain.4
			name = "giga_frameworld_docs_districts"
			desc = "giga_frameworld_docs_districts_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}

		create_point_of_interest = {
			id = giga_frameworld_docs_chain.5
			name = "giga_frameworld_docs_conquest"
			desc = "giga_frameworld_docs_conquest_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}

		create_point_of_interest = {
			id = giga_frameworld_docs_chain.6
			name = "giga_frameworld_docs_stations"
			desc = "giga_frameworld_docs_stations_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}

		create_point_of_interest = {
			id = giga_frameworld_docs_chain.7
			name = "giga_frameworld_docs_disabled"
			desc = "giga_frameworld_docs_disabled_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}

		create_point_of_interest = {
			id = giga_frameworld_docs_chain.8
			name = "giga_frameworld_docs_bonuses"
			desc = "giga_frameworld_docs_bonuses_desc"
			event_chain = "giga_frameworld_docs_chain"
			location = capital_scope
		}

		##### END DOCS

		# start outpost situation
		start_situation = {
			type = giga_situation_frameworld_outposts
			target = capital_scope
		}

		# set up AI variables
		set_variable = {
			which = frameworld_ai_outpost_candidate_count
			value = 0
		}

		#event_target:giga_global_situation_country = {
		#	start_situation = {
		#		type = giga_situation_frameworld_planet_effects
		#		target = prev.capital_scope
		#	}
		#}

		# associate this country with a specific frame
		set_country_flag = giga_frameworld@capital_scope

		if = {
			limit = {
				exists = capital_scope
			}
			capital_scope = {
				# associate the frameworld with the country too
				set_planet_flag = giga_frameworld@root

				# clear the conquered modifier which apparently gets executed BEFORE the start event
				remove_modifier = frameworld_conquered

				# fix the entity
				giga_frameworld_update_entity_with_fallback = {
					WHO = root
				}

				# spawn defensive stations
				giga_frameworld_spawn_starting_defensive_stations = { WHO = root }

				# clear normal planet stuff we can't use
				clear_deposits = yes
				#remove_all_districts = yes # this wrecks our lab due to not enough building slots

				# strip extra resources from the black hole, we want to make sure it's clean
				solar_system.star = {
					clear_deposits = yes
				}

				# make sure the variables are set up for expansion decisions
				giga_frameworld_init_variables = yes

				# set other AI variables
				set_variable = {
					which = frameworld_ai_artisan_modifier
					value = 0
				}

				##### set up deposits

				# an appropriate core
				if = {
					limit = { root = { is_regular_empire = yes }	}
					add_deposit = d_frameworld_admin
				}
				else_if = {
					limit = { root = { is_hive_empire = yes }	}
					add_deposit = d_frameworld_hive
				}
				else_if = {
					limit = { root = { is_machine_empire = yes }	}
					add_deposit = d_frameworld_core
				}


				# max mining districts
				add_deposit = d_frameworld_remnants

				# environmentalist nature preserve
				if = {
					limit = {
						root = { giga_is_environmentalist = yes }
					}
					remove_building = building_ranger_lodge
					add_deposit = d_frameworld_nature_preserve
				}

				# job upkeep adjustment
				add_deposit = d_giga_job_upkeep

				##### replace districts
				add_modifier = {
					modifier = frameworld_building_wreck_fix
					days = 3
				}

				remove_all_districts = yes
				while = {
					count = value:tec_start_city_district_count
					add_district_and_planet_size_if_needed_effect = {
						district = district_giga_frameworld_city
					}
				}

				# 4 - 6 jobs - EVOLVED NOTE - farming and swaps
				while = {
					count = value:tec_start_farming_district_count
					add_district_and_planet_size_if_needed_effect = {
						district = district_giga_frameworld_farming
					}
				}

				# 4 jobs - EVOLVED NOTE - mining and swaps
				while = {
					count = value:tec_start_mining_district_count
					add_district_and_planet_size_if_needed_effect = {
						district = district_giga_frameworld_mining
					}
				}

				# 2 jobs - EVOLVED NOTE - generator and swaps
				while = {
					count = value:tec_start_generator_district_count
					add_district_and_planet_size_if_needed_effect = {
						district = district_giga_frameworld_generator
					}
				}

				# 4 jobs - EVOLVED NOTE - industrial and swaps
				while = {
					count = value:tec_start_industrial_district_count
					if = {
						# alternate factory-foundry for normal empires
						limit = {
							owner = { is_gestalt = no }
						}
						if = {
							limit = { not = { has_planet_flag = foundry_next } }
							add_district_and_planet_size_if_needed_effect = {
								district = district_giga_frameworld_factory
							}
							set_planet_flag = foundry_next
						}
						else = {
							add_district_and_planet_size_if_needed_effect = {
								district = district_giga_frameworld_foundry
							}
							remove_planet_flag = foundry_next
						}
					}
					else = {
						# all foundry for gestalts, servitor can rely on their starting sanctuary
						add_district_and_planet_size_if_needed_effect = {
							district = district_giga_frameworld_foundry
						}
					}
				}

				#####
				remove_modifier = frameworld_building_wreck_fix

				# get rid of any bad districts or buildings which can't be supported
				validate_and_repair_planet_buildings_and_districts = yes

				# fix unemployed pops from the initial district shuffle
				every_owned_pop = {
					limit = {
						is_unemployed = yes
					}
					clear_pop_category = yes
				}
				check_planet_employment = yes

				# set the maintenance mod on
				giga_frameworld_apply_expanded_maintenance_modifier = yes

				# set up extra growth mechanics
				giga_extra_growth_setup = yes
			}
		}
	}
}


namespace = giga_hke
#HKE holy katzen empire refederates
country_event = { #HKE REFEDERATES
	id = giga_hke.0026
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_federation = { has_federation_type = hke_federation }
	}

	immediate = {
		event_target:giga_hke_leader = {
			ruler = {
				exile_leader_as = hkeruler
			}
			leave_alliance = {
				override_requirements = yes
			}
			capital_scope = {
				create_country = {
					name = "Holy Katzen Empire"
					species = event_target:giga_hke_leader.species
					type = default
					civics = {
						civic = civic_distinguished_admiralty
						civic = civic_warrior_culture
						civic = civic_spirit_of_the_kaiser
					}
					name_list = "katzens"
					flag = {
						icon={
							category="human"
							file="flag_human_2.dds"
						}
						background={
							category="backgrounds"
							file="stripe.dds"
						}
						colors={
							"grey"
							"grey"
							"null"
							"null"
						}
					}
					authority = auth_imperial
					ethos = {
						ethic = ethic_materialist
						ethic = ethic_fanatic_militarist
						ethic = ethic_fanatic_authoritarian
					}
					origin = origin_hke
					effect = {
						set_leader = hkeruler
						set_graphical_culture = reptilian_01
						ruler = { save_global_event_target_as = hkekaiser }
						add_resource = {
							alloys = 500000
							food = 100000
							minerals = 100000
							energy = 100000
							consumer_goods = 100000
							unity = 1000000
						}
						apply_katzen_difficulty = yes
						every_galaxy_planet = { set_surveyed = { surveyed = yes surveyor = root } }
						add_modifier = { modifier = "hke_buffs" days = -1 }
						add_modifier = { modifier = "hke_centra_3" days = -1 }
						save_global_event_target_as = hke_federated_country
						establish_communications_no_message = root
						add_opinion_modifier = { who = root modifier = opinion_giga_galactic_threat }
						set_country_flag = hke_federated
						copy_techs_from = { target = event_target:giga_hke_leader }
					}
				}
				set_owner = event_target:hke_federated_country
				set_capital = yes
				save_global_event_target_as = hke_capital
				owner = {
					create_leader = {
						class = admiral
						species = event_target:flusion_katzens
						name = "Dietrich Videafurr"
						skill = 10
						traits = {
							trait = katzen_trait_elite
							trait = katzen_trait_blitzkrieg
							trait = katzen_trait_nukelad
						}
						effect = {
							save_event_target_as = holy_katzen_admiral
						}
					}
				}
				create_fleet = { #Spawn a new task force
					name = "Helligekatzarmada Einer"
					settings = {
						spawn_debris = no
						can_upgrade = no
						uses_naval_capacity = no
					}
					effect = {
						set_owner = event_target:hke_federated_country
						create_ship = {
							name = "Kaiser Alpha"
							design = "Kaiser Moon"
							prefix = no
						}
						while = {
							count = 20
							create_ship = {
								name = random
								design = "Neu-Clermeowth"
								prefix = no
							}
						}
						while = {
							count = 45
							create_ship = {
								name = random
								design = "Douclaw"
								prefix = no
							}
						}
						while = {
							count = 100
							create_ship = {
								name = random
								design = "Katzchen"
								prefix = no
							}
						}
						assign_leader = event_target:holy_katzen_admiral
						set_fleet_flag = katzen_reserve_fleet
						set_fleet_flag = katzen_cruiser_fleet
						set_location = {
							target = event_target:hke_capital
							distance = 10
							angle = random
						}
					}
				}
				owner = {
					create_leader = {
						class = admiral
						species = event_target:flusion_katzens
						name = "Meorwin"
						skill = 10
						traits = {
							trait = katzen_trait_elite
							trait = katzen_trait_blitzkrieg
							trait = katzen_trait_nukelad
						}
						effect = {
							save_event_target_as = holy_katzen_admiral
						}
					}
				}
				create_fleet = { #Spawn a new task force
					name = "Helligekatzarmada Zwei"
					settings = {
						spawn_debris = no
						can_upgrade = no
						uses_naval_capacity = no
					}
					effect = {
						set_owner = event_target:hke_federated_country
						create_ship = {
							name = "Kaiser Beta"
							design = "Kaiser Moon"
							prefix = no
						}
						while = {
							count = 20
							create_ship = {
								name = random
								design = "Neu-Clermeowth"
								prefix = no
							}
						}
						while = {
							count = 45
							create_ship = {
								name = random
								design = "Douclaw"
								prefix = no
							}
						}
						while = {
							count = 100
							create_ship = {
								name = random
								design = "Katzchen"
								prefix = no
							}
						}
						assign_leader = event_target:holy_katzen_admiral
						set_fleet_flag = katzen_reserve_fleet
						set_fleet_flag = katzen_cruiser_fleet
						set_location = {
							target = event_target:hke_capital
							distance = 20
							angle = random
						}
					}
				}
			}
		}
		every_country = {
			establish_communications_no_message = event_target:hke_federated_country
		}
		every_country = {
			establish_contact = {
				who = event_target:hke_federated_country
				location = event_target:hke_capital.solar_system
			}
		}
		event_target:giga_hke_leader = {
			every_owned_fleet = {	set_owner = event_target:hke_federated_country }
			every_owned_leader = {	set_owner = event_target:hke_federated_country }
			every_owned_army = {	set_owner = event_target:hke_federated_country }
			every_owned_planet = {
				set_owner = event_target:hke_federated_country
				set_controller = event_target:hke_federated_country
			}
		}
		every_country = {
			limit = {
				federation = { has_federation_type = hke_federation }
				has_country_flag = is_in_hke
				has_country_flag = katzen_splinter_state
			}
			leave_alliance = {
				override_requirements = yes
			}
			random_list = {
				90 = {
					every_owned_fleet = {	set_owner = event_target:hke_federated_country }
					every_owned_leader = {	set_owner = event_target:hke_federated_country }
					every_owned_army = {	set_owner = event_target:hke_federated_country }
					every_owned_planet = {
						set_owner = event_target:hke_federated_country
						set_controller = event_target:hke_federated_country
					}
				}
				10 = {
					set_country_flag = refused_hke_federalization
				}
			}
		}
		event_target:hke_country = {
			destroy_country = yes
		}
		event_target:hke_federated_country = {
			add_opinion_modifier = {
				who = event_target:flusion_conqueror
				modifier = opinion_ended_kaiser
			}
			country_event = { id = giga_hke.0028 days = 360 } #CHANGE TO SMTH ELSE
			every_planet_within_border = {
				limit = {
					is_colony = yes
					owner = { is_country = event_target:hke_federated_country }
				}
				katzen_clear_capitals = yes
				add_building = building_giga_katzen_capital
			}
			every_system_within_border = {
				every_neighbor_system = {
					limit = {
						NOR = {
							exists = starbase
							exists = owner
							any_system_planet = {
								is_colony = yes
								owner = {
									NOT = { is_country_type = primitive }
								}
							}
							any_fleet_in_system = { #no hostiles
								owner = {
									OR = {
										is_at_war_with = event_target:hke_federated_country
										is_hostile = event_target:hke_federated_country
									}
								}
							}
						}
					}
					create_starbase = { #Make a starbase
						size = starbase_outpost
						owner = event_target:hke_federated_country
					}
				}
			}
		}
		every_country = {
			country_event = { id = giga_hke.0027 days = 1 }
		}
	}
}